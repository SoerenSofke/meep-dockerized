name: Dockerize Meep

on:
  push:
  schedule:
    - cron:  '0 2 * * *'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Dockerize meep 
      run: |
        wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh        
        docker build -t soerensofke/meep:latest .
        docker export $(docker create soerensofke/meep:latest) | gzip > meep-rootfs.tar.gz
    - name: Push to docker hub
      run: |
        echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin
        docker push soerensofke/meep:latest        
      env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    - name: Release on github
      id: release_on_github
      uses: actions/create-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
          tag_name: ${{ github.run_number }}
          release_name: ${{ github.run_number }}
    - name: Upload release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          upload_url: ${{ steps.release_on_github.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./meep-rootfs.tar.gz
          asset_name: meep-rootfs-v{{ github.run_number }}.tar.gz
          asset_content_type: application/gzip
                    
    
